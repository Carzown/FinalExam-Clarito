# -*- coding: utf-8 -*-
"""Final Exam: Model Deployment in the Cloud_Clarito

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qZcK3Z1XNz-2zwI0_zPiyP_-A0SaGar4

<h1> Final Examination </h1>
Name: Clarito, Vincent Carson D. <br>
Course and Section: CPE019 CPE32S1 <br>
Instructor: Engr. Robin Valenzuela <br>
Date Performed: 12/12/24 <br>
Date Submitted: 12/12/24 <br>

<hr>
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
import cv2
import numpy as np
from google.colab.patches import cv2_imshow
from tensorflow.keras import layers, models
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10)
])

model.compile(optimizer='adam',loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))
# Save the model
model.save('/content/drive/My Drive/FinalExamEmergingTech2/cifar10_model.h5')

import tensorflow as tf
import numpy as np
import cv2
from google.colab.patches import cv2_imshow
from google.colab import files

model = tf.keras.models.load_model('/content/drive/My Drive/FinalExamEmergingTech2/cifar10_model.h5')
class_labels = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

def predict(image):
    image = cv2.resize(image, (32, 32))
    input_arr = np.expand_dims(image, axis=0) / 255.0
    prediction = model.predict(input_arr)
    class_prediction = np.argmax(prediction)
    confidence = np.max(prediction)
    return class_labels[class_prediction], confidence

uploaded = files.upload()

for filename in uploaded.keys():
    image = cv2.imread(filename)
    cv2_imshow(image)
    # Make prediction
    class_name, confidence = predict(image)
    print(f'Prediction: {class_name} (Confidence: {confidence:.2f})')

import os

model_path = '/content/drive/My Drive/cifar10_model.h5'

# Check if the file exists
if os.path.exists(model_path):
    print("Model file exists.")
else:
    print("Model file does not exist. Please check the path.")

# List contents of the directory to verify the path
print(os.listdir('/content/drive/My Drive/FinalExamEmergingTech2/'))

!pip install streamlit

!pip install --upgrade tensorflow

# Commented out IPython magic to ensure Python compatibility.
# %%writefile CIFAR10DetectionSystem.py

! streamlit run CIFAR10DetectionSystem.py & npx localtunnel --port 8501